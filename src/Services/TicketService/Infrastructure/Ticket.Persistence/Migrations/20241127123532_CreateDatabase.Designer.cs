// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ticket.Persistence.Context;

#nullable disable

namespace Ticket.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241127123532_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consumed");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid")
                        .HasColumnName("consumer_id");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_time");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("last_sequence_number");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lock_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer")
                        .HasColumnName("receive_count");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("pk_inbox_state");

                    b.HasAlternateKey("MessageId", "ConsumerId")
                        .HasName("ak_inbox_state_message_id_consumer_id");

                    b.HasIndex("Delivered")
                        .HasDatabaseName("ix_inbox_state_delivered");

                    b.ToTable("inbox_state", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("content_type");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("destination_address");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueue_time");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_time");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("fault_address");

                    b.Property<string>("Headers")
                        .HasColumnType("text")
                        .HasColumnName("headers");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_consumer_id");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("initiator_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_type");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_id");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("response_address");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_time");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("source_address");

                    b.HasKey("SequenceNumber")
                        .HasName("pk_outbox_message");

                    b.HasIndex("EnqueueTime")
                        .HasDatabaseName("ix_outbox_message_enqueue_time");

                    b.HasIndex("ExpirationTime")
                        .HasDatabaseName("ix_outbox_message_expiration_time");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_outbox_message_outbox_id_sequence_number");

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_");

                    b.ToTable("outbox_message", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("last_sequence_number");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lock_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("OutboxId")
                        .HasName("pk_outbox_state");

                    b.HasIndex("Created")
                        .HasDatabaseName("ix_outbox_state_created");

                    b.ToTable("outbox_state", (string)null);
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Category", b =>
                {
                    b.Property<string>("CategoryID")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("CategoryID")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Cinema", b =>
                {
                    b.Property<string>("CinemaID")
                        .HasColumnType("text")
                        .HasColumnName("cinema_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("CityID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("CinemaID")
                        .HasName("pk_cinemas");

                    b.HasIndex("CityID")
                        .HasDatabaseName("ix_cinemas_city_id");

                    b.ToTable("cinemas", (string)null);
                });

            modelBuilder.Entity("Ticket.Domain.Entities.City", b =>
                {
                    b.Property<string>("CityID")
                        .HasColumnType("text")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("CityID")
                        .HasName("pk_cities");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Hall", b =>
                {
                    b.Property<string>("HallID")
                        .HasColumnType("text")
                        .HasColumnName("hall_id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("CinemaID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cinema_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("HallID")
                        .HasName("pk_halls");

                    b.HasIndex("CinemaID")
                        .HasDatabaseName("ix_halls_cinema_id");

                    b.ToTable("halls", (string)null);
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Pricing", b =>
                {
                    b.Property<string>("PricingID")
                        .HasColumnType("text")
                        .HasColumnName("pricing_id");

                    b.Property<string>("CategoryID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("SessionID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.HasKey("PricingID")
                        .HasName("pk_pricings");

                    b.HasIndex("CategoryID")
                        .HasDatabaseName("ix_pricings_category_id");

                    b.HasIndex("SessionID")
                        .HasDatabaseName("ix_pricings_session_id");

                    b.ToTable("pricings", (string)null);
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("text")
                        .HasColumnName("seat_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HallID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hall_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("row");

                    b.HasKey("SeatID")
                        .HasName("pk_seats");

                    b.HasIndex("HallID")
                        .HasDatabaseName("ix_seats_hall_id");

                    b.ToTable("seats", (string)null);
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Session", b =>
                {
                    b.Property<string>("SessionID")
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.Property<string>("CinemaID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cinema_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HallID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hall_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("MovieID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movie_id");

                    b.Property<DateOnly>("SessionDate")
                        .HasColumnType("date")
                        .HasColumnName("session_date");

                    b.Property<TimeOnly>("SessionTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("session_time");

                    b.HasKey("SessionID")
                        .HasName("pk_sessions");

                    b.HasIndex("CinemaID")
                        .HasDatabaseName("ix_sessions_cinema_id");

                    b.HasIndex("HallID")
                        .HasDatabaseName("ix_sessions_hall_id");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("text")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("SeatID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("seat_id");

                    b.Property<string>("SessionID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("TicketID")
                        .HasName("pk_tickets");

                    b.HasIndex("SeatID")
                        .HasDatabaseName("ix_tickets_seat_id");

                    b.HasIndex("SessionID")
                        .HasDatabaseName("ix_tickets_session_id");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.OutboxState", null)
                        .WithMany()
                        .HasForeignKey("OutboxId")
                        .HasConstraintName("fk_outbox_message_outbox_state_outbox_id");

                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.InboxState", null)
                        .WithMany()
                        .HasForeignKey("InboxMessageId", "InboxConsumerId")
                        .HasPrincipalKey("MessageId", "ConsumerId")
                        .HasConstraintName("fk_outbox_message_inbox_state_inbox_message_id_inbox_consumer_");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Cinema", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.City", "City")
                        .WithMany("Cinemas")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cinemas_cities_city_id");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Hall", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Cinema", "Cinema")
                        .WithMany("Halls")
                        .HasForeignKey("CinemaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_halls_cinemas_cinema_id");

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Pricing", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Category", "Category")
                        .WithMany("Pricings")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pricings_categories_category_id");

                    b.HasOne("Ticket.Domain.Entities.Session", "Session")
                        .WithMany("Pricings")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pricings_sessions_session_id");

                    b.Navigation("Category");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Seat", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_seats_halls_hall_id");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Session", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Cinema", "Cinema")
                        .WithMany("Sessions")
                        .HasForeignKey("CinemaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_cinemas_cinema_id");

                    b.HasOne("Ticket.Domain.Entities.Hall", "Hall")
                        .WithMany("Sessions")
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_halls_hall_id");

                    b.Navigation("Cinema");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_seats_seat_id");

                    b.HasOne("Ticket.Domain.Entities.Session", "Session")
                        .WithMany("Tickets")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_sessions_session_id");

                    b.Navigation("Seat");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Category", b =>
                {
                    b.Navigation("Pricings");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Cinema", b =>
                {
                    b.Navigation("Halls");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.City", b =>
                {
                    b.Navigation("Cinemas");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Hall", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Session", b =>
                {
                    b.Navigation("Pricings");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
